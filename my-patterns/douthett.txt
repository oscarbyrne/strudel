const MIDI_DEVICE = 'UM-ONE MIDI 1';

const e2 = {
  note: {
    trigger: 60,
  },
  oscillator: {
    pitch: 80,
    glide: 81,
    edit: 82,
    level: 7,
    pan: 10,
  },
  filter: {
    cutoff: 74,
    resonance: 71,
    eg: 83,
  },
  modulation: {
    depth: 85,
    speed: 86,
  },
  amp: {
    attack: 73,
    decay: 72,
  },
  insert: {
    edit: 87,
  },
  touchpad: {
    x: 102,
    y: 103,
  },
  inscribe: function(part, pattern) {
    return pattern
      .midichan(part).midi(MIDI_DEVICE)
      .withValue(
        v => {
          if('value' in v) {
            const octave = v.octave || 0;
            return {
              note: v.value + octave*12,
              ...v
            }
          } else {
            return v;
          }
        }
      );
  },
  // Adjust oscillator pitch to play fractional notes
  microtonal: function(pattern) {
    return pattern
      .floor()
      .ccn(e2.oscillator.pitch)
      .ccv(
        pattern.withValue(
          // 14/127 is equal to 1 semitone pitch bend
          // CC scale is logarithmic for some reason
          v => 0.5 + Math.log10(1+9*(v%1))*14/127
        )
      );
  }
};

const sp = {
  inscribe: function(bank, pattern) {
    return pattern.withValue(
      v => {
        const n_bank = 'ABCDEFGHIJ'.indexOf(bank.toUpperCase());
        const midichan = 1 + Math.floor(n_bank / 5);
        const note = 46 + v + (12 * (n_bank % 5));
        return {
          note: note,
          midichan: midichan,
        };
      }
    ).midi(MIDI_DEVICE);
  },
};

// Recursive J function models a FiPS configuration space
// action on beam k
// Source: https://tinyurl.com/plotkin-fips
function J(d, m, k) {
  if (d.length < 2 || m.length < 1) {
    return k;
  }
  k = J(d.slice(1), m.slice(1), k);
  return Math.floor((k * d[0] + m[0]) / d[1]);
};

class FiPS {
  constructor(d, m) {
    if(d.length != m.length + 1) {
      throw new Error('Malformed FiPS config');
    }
    this.d = d;
    this.m = m;
  };
  get d0() {
    return this.d[0];
  };
  get dn() {
    return this.d.at(-1);
  };
  J(k) {
    return J(this.d, this.m, k);
  };
};

// Transform timing of a pattern to match 'rhythm key'
// defined by FiPS
function warp(fips, pattern) {
  let layers = [];

  function scaler(l0, r0, l1, r1) {
    return (p) => p
      .zoom(l0/fips.dn, r0/fips.dn)
      .compress(l1/fips.d0, r1/fips.d0)
  };
  
  // Split pattern into equal segments to be time-stretched
  for (var n = 0; n < fips.dn; n++) {
    // Fig 1
    //         l0   r0
    //         |    |
    //  0------+====+----------d0

    // Fig 2
    //           l1     r1
    //           |      |
    //  0--------+======+------d0
    const l0 = n;
    const r0 = n + 1;
    const l1 = fips.J(l0);
    const r1 = fips.J(r0);

    if (r1 <= fips.d0) {
      layers.push(
        scaler(l0, r0, l1, r1)
      );
    } else {
      // In case r1 overshoots d0, split off the overshot
      // (section b) and place it at beginning of cycle
      
      // Fig 3
      //             la0    ra0
      //             |      |
      //  0----------+======+####d0
      //                    |    |
      //                    lb0  rb0
      
      // Fig 4
      //               la1       ra1
      //               |         |
      //  0------------+=========d0     +
      //                         |      |
      //                         lb1    rb1

      // Fig 5
      //               la1       ra1
      //               |         |
      //  0######+-----+=========d0
      //  |      |
      //  lb1    rb1

      // Fig 3 shows pre-transformation
      // Fig 4 shows section b overshot (lb1-rb1)
      // Fig 5 shows section b moved to beginning of cycle

      // Calculate widths
      const w0 = r0-l0;
      const w1 = r1-l1;
      const wa1 = fips.d0-l1;
      const wa0 = wa1*w0/w1;

      // Pre-transformation
      const la0 = l0;
      const ra0 = la0 + wa0;
      const lb0 = ra0;
      const rb0 = r0;

      // Move section b to beginning of cycle
      const la1 = l1;
      const ra1 = fips.d0;
      const lb1 = 0;
      const rb1 = r1-fips.d0;

      layers.push(
        scaler(la0, ra0, la1, ra1),
        scaler(lb0, rb0, lb1, rb1)
      );
    }
  }
  return pattern.layer(...layers);
};

// Transform pitches of a pattern to match scale key
// defined by FiPS
function weft(fips, pattern) {
  return e2.microtonal(
    pattern.withValue(
      k => {
        // Allow interstitial notes like with rhythm
        const hi = fips.J(Math.ceil(k));
        const lo = fips.J(Math.floor(k));
        return (lo + k%1 * (hi-lo))*12/fips.d0
      }
    )
  );
};

function cc(n, scalar, pattern) {
  return ccv(pattern.div(scalar)).ccn(n);
};

register('e2', e2.inscribe);
register('sp', sp.inscribe);
register('warp', warp);
register('weft', weft);
register('cc', cc);
